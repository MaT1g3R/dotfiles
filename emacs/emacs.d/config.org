* Basic tweaks

#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)

(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)

;; display line and column number
(global-display-line-numbers-mode)
(column-number-mode +1)

;; Setup fonts
(require 'init-fonts)
(require 'init-liga)

;; better scrolling experience
(setq scroll-margin 0
  scroll-conservatively 10000
  scroll-preserve-screen-position t
  auto-window-vscroll nil)

;; increase line space for better readability
(setq-default line-spacing 3)

;; always use spaces for indentation (default to 4 spaces).
(setq-default indent-tabs-mode nil
tab-width 4)

;; insert new line at end of file
(setq require-final-newline 'visit-save)

;; strip trailing whitespace
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; put all backup files in emacs directory
(setq backup-directory-alist `(("." . "~/.emacs.d/backups")))

;; esc quits
(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
In Delete Selection mode, if the mark is active, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark  t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
#+END_SRC

* Configuration for built-in packages

Since we're using use-package as our package management system, we might as well
try to organize under the same syntax as much as possible to keep the
configuration consistent. The option ~use-package-always-ensure~ is turned on in
~init.el~, so we'll add ~:ensure nil~ when configuring the built-in packages.

** Automatically refreshes the buffer for changes outside of Emacs
Auto refreshes every 2 seconds. Don’t forget to refresh the version control status as well.
#+BEGIN_SRC emacs-lisp
(use-package autorevert
  :ensure nil
  :config
  (global-auto-revert-mode +1)
  (setq auto-revert-interval 2
        auto-revert-check-vc-info t
        global-auto-revert-non-file-buffers t
        auto-revert-verbose nil))
#+END_SRC

** Show matching parentheses
Reduce the highlight delay to instantly.
#+BEGIN_SRC emacs-lisp
(use-package paren
  :ensure nil
  :config
  (setq show-paren-delay 0)
  (show-paren-mode +1))
#+END_SRC

** Dried
 #+BEGIN_SRC emacs-lisp
 (use-package dired
  :ensure nil
  :config
  (put 'dired-find-alternate-file 'disabled nil) ; reuse same buffer when navigating
  (setq delete-by-moving-to-trash t))
 #+END_SRC

** Spell checker
#+BEGIN_SRC emacs-lisp
(require 'init-spelling)
#+END_SRC
** Omit default startup screen
#+BEGIN_SRC emacs-lisp
(use-package "startup"
  :ensure nil
  :config (setq inhibit-startup-screen t))
#+END_SRC
** Auto-pairing quotes and parentheses etc.
#+BEGIN_SRC emacs-lisp
(use-package elec-pair
  :ensure nil
  :hook (prog-mode . electric-pair-mode))
#+END_SRC
* Third-party packages
Normally, we need to add ~:ensure t~ to tell use-package to download packages
when it’s not available. But since we’ve added ~use-package-always-ensure~ in
~init.el~, we can omit it.
** GUI enhancements
*** Look and feel
#+BEGIN_SRC emacs-lisp
  ;; base16-oceanicnext theme
  (use-package base16-theme
    :config
    (load-theme 'base16-oceanicnext t))

  ;; Set the cursor color based on the evil state
  (defvar my/base16-colors base16-oceanicnext-colors)
  (setq evil-emacs-state-cursor   `(,(plist-get my/base16-colors :base0D) box)
        evil-insert-state-cursor  `(,(plist-get my/base16-colors :base0D) bar)
        evil-motion-state-cursor  `(,(plist-get my/base16-colors :base0E) box)
        evil-normal-state-cursor  `(,(plist-get my/base16-colors :base0B) box)
        evil-replace-state-cursor `(,(plist-get my/base16-colors :base08) bar)
        evil-visual-state-cursor  `(,(plist-get my/base16-colors :base09) box))

  (use-package all-the-icons)

  ;; Dashboard
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo
          dashboard-banner-logo-title "Yay Evil!"
          dashboard-set-heading-icons nil
          dashboard-set-file-icons nil)
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)
                            (bookmarks . 5)
                            (agenda . 5)
                            (registers . 5))))


  (use-package emojify)
  (add-hook 'after-init-hook #'global-emojify-mode)

  ;; Spaceline for mode line
  (use-package spaceline)
  (setq powerline-default-separator 'wave)
  (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
  (require 'spaceline-config)
  (spaceline-spacemacs-theme)
  (spaceline-helm-mode)
#+END_SRC

*** Syntax highlighting
Lightweight syntax highlighting improvement for numbers, operators, and escape sequences.
#+BEGIN_SRC emacs-lisp
(use-package highlight-numbers
  :hook (prog-mode . highlight-numbers-mode))

(use-package highlight-operators
  :hook (prog-mode . highlight-operators-mode))

(use-package highlight-escape-sequences
  :hook (prog-mode . hes-mode))
#+END_SRC
** Vi keybindings
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :diminish undo-tree-mode
    :init
    (setq evil-want-C-u-scroll t)
    (setq evil-shift-width 4)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode +1)
    (with-eval-after-load 'evil-maps ; avoid conflict with company tooltip selection
      (define-key evil-insert-state-map (kbd "C-n") nil)
      (define-key evil-insert-state-map (kbd "C-p") nil))
    (defun my/save-and-kill-this-buffer ()
      (interactive)
      (save-buffer)
      (kill-this-buffer))
    (evil-ex-define-cmd "q" 'kill-this-buffer)
    (evil-ex-define-cmd "wq" 'my/save-and-kill-this-buffer)
    (use-package evil-commentary
      :after evil
      :diminish evil-commentary-mode
      :config (evil-commentary-mode +1)))

  (use-package evil-escape
    :requires evil
    :config
    (evil-escape-mode t)
    (setq-default evil-escape-key-sequence "ii"
      evil-escape-delay 0.2))

  (use-package evil-collection
    :after (evil helm)
    :config
    (setq evil-collection-setup-minibuffer t)
    (evil-collection-init))

  (global-set-key "\C-c\C-e" 'evil-mode)
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (evil-define-key 'normal 'global (kbd "C-/") 'evil-commentary)
  (evil-define-key 'normal 'global "zs" 'my-save-word)
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status)
  :config (add-hook 'with-editor-mode-hook #'evil-insert-state))
(use-package evil-magit)
#+END_SRC

** Project management
*** Helm for searching everywhere
#+BEGIN_SRC emacs-lisp
(use-package helm)
(require 'helm-config)
(global-set-key (kbd "M-x") 'helm-M-x)
(evil-define-key 'normal 'global
  (kbd "<SPC>b") 'helm-projectile-switch-to-buffer)
(evil-define-key 'normal 'global
  ";" 'helm-M-x)
(evil-define-key 'normal 'global (kbd "C-f") 'helm-projectile-find-file)

(use-package helm-rg)
(require 'helm-rg)
#+END_SRC

*** Treemacs for project file management
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    (treemacs-resize-icons 22)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-1"   . treemacs)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after treemacs evil)

(use-package treemacs-projectile
  :after treemacs projectile)

(use-package treemacs-icons-dired
  :after treemacs dired
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit)
#+END_SRC

*** Projectile for project management
#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :commands (helm-projectile helm-projectile-switch-project helm-projectile-switch-to-buffer helm-projectile-find-file)
  :ensure t)

(use-package projectile
  :ensure t
  :defer 1
  :config
  (projectile-mode)
  (setq projectile-enable-caching t)
  (setq projectile-mode-line
        '(:eval
          (format " Proj[%s]"
                  (projectile-project-name)))))
#+END_SRC

*** JIRA
#+begin_src emacs-lisp
(use-package org-jira)
(setq jiralib-url "https://jira.garnercorp.com")
#+end_src

** Programming language support and utilities
*** LSP mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :hook (python-mode . lsp-deferred)
  :config

  ;; lsp extras
  (use-package lsp-ui
    :ensure t
    :config
    (setq lsp-ui-sideline-ignore-duplicate t)
    (add-hook 'lsp-mode-hook 'lsp-ui-mode)
    (add-hook 'python-mode-hook 'flycheck-mode))

  (use-package company-lsp
    :config
    (push 'company-lsp company-backends))

  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
  (lsp-treemacs-sync-mode 1)
  (evil-define-key 'normal 'global (kbd "<SPC>l") 'lsp-format-buffer))
#+END_SRC
*** Yaml
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode)
#+END_SRC

*** Company for auto-completion
#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :config
  (setq company-minimum-prefix-length 1
        company-idle-delay 0.1
        company-selection-wrap-around t
        company-tooltip-align-annotations t
        company-frontends '(company-pseudo-tooltip-frontend ; show tooltip even for single candidate
                            company-echo-metadata-frontend))
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "C-j") 'company-select-next)
    (define-key company-active-map (kbd "C-k") 'company-select-previous)
    (define-key company-active-map (kbd "RET") 'company-complete)))
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

*** Flycheck
A modern on-the-fly syntax checking extension – absolutely essential
#+BEGIN_SRC emacs-lisp
  (use-package flycheck :config (global-flycheck-mode +1))
  (custom-set-variables
    '(flycheck-python-flake8-executable "python3")
    '(flycheck-python-pycompile-executable "python3")
    '(flycheck-python-pylint-executable "python3"))
#+END_SRC

*** Org Mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :hook ((org-mode . visual-line-mode)
         (org-mode . org-indent-mode))
  :config
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "C-<tab>") nil))
  (use-package org-bullets :hook (org-mode . org-bullets-mode)))
(use-package org-evil)
(evil-define-key 'normal org-mode-map (kbd "<SPC>i") 'org-clock-in)
(evil-define-key 'normal org-mode-map (kbd "<SPC>o") 'org-clock-out)
(org-babel-do-load-languages
 'org-babel-load-languages '(
(shell . t)
(emacs-lisp . t)
))
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
#+END_SRC

*** Yasnippet & yasnippet-snippets
Use TAB to expand snippets. The code snippet below also avoids clashing with company-mode.
#+BEGIN_SRC emacs-lisp
(use-package yasnippet-snippets
  :config
  (yas-global-mode +1)
  (advice-add 'company-complete-common
              :before
              (lambda ()
                (setq my-company-point (point))))
  (advice-add 'company-complete-common
              :after
              (lambda ()
                (when (equal my-company-point (point))
                  (yas-expand)))))
#+END_SRC
*** Useful major modes
Markdown mode and JSON mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode :hook (markdown-mode . visual-line-mode))

(use-package json-mode)
#+END_SRC
*** Kubernetes
#+begin_src emacs-lisp
(use-package kubernetes
  :commands (kubernetes-overview))

(use-package kubernetes-evil
  :after kubernetes)
#+end_src

** Misc
*** s.el
#+BEGIN_SRC emacs-lisp
(use-package s)
#+END_SRC

*** Diminish minor modes
The diminish package is used to hide unimportant minor modes in the modeline.
It provides the :diminish keyword we’ve been using in other use-package declarations.
#+begin_src emacs-lisp
(use-package diminish
  :demand t)
#+end_src
*** Which-key
Provides us with hints on available keystroke combinations.
#+begin_src emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :config
  (which-key-mode +1)
  (setq which-key-idle-delay 0.4
        which-key-idle-secondary-delay 0.4))
#+end_src
*** Vterm for terminal
#+BEGIN_SRC emacs-lisp
(use-package vterm)
(global-set-key "\M-t" 'projectile-run-vterm)
#+END_SRC
*** Slack
#+BEGIN_SRC emacs-lisp
(require 'init-slack)
#+END_SRC
*** Set exec-path
#+BEGIN_SRC emacs-lisp
  (require 'exec-path-from-shell)
  (exec-path-from-shell-initialize)
#+END_SRC

* My own functions
Load and configure my own functions
#+BEGIN_SRC emacs-lisp
(require 'timesheet)
#+END_SRC
